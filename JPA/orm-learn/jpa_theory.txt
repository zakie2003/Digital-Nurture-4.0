JPA (Java Persistence API)
JPA is a specification provided by Java for managing relational data in Java applications. 
It defines a set of interfaces and annotations to map Java objects (entities) to database tables. 
JPA is part of the Java EE (now Jakarta EE) standard, meaning it is just a contract and doesn't provide any implementation. 
Developers use JPA to define how objects should be persisted and interact with the database using a standard API, 
without worrying about the underlying persistence logic. To make JPA work, you need an implementation like Hibernate, EclipseLink, or OpenJPA.

Hibernate
Hibernate is a popular ORM (Object-Relational Mapping) framework and one of the most widely used implementations of the JPA specification. 
It not only supports JPA but also provides additional advanced features beyond JPA, such as better caching, custom SQL support, lazy loading, 
and automatic table creation. Hibernate translates Java objects into database queries and vice versa. 
Even though it can be used standalone (with its own API), it's often used as the JPA provider under the hood in many Spring and Java EE applications.

Spring Data JPA
Spring Data JPA is a part of the larger Spring Data project. It builds on top of JPA and Hibernate to simplify database access and reduce boilerplate code.
It allows developers to define repositories as interfaces, and Spring will automatically generate the implementation at runtime. 
Spring Data JPA also integrates seamlessly with the Spring ecosystem and provides features like dynamic query generation, pagination, sorting, 
and custom query methods using method names or @Query annotations. In essence, Spring Data JPA acts as a wrapper around JPA and a provider like Hibernate,
streamlining development and making data access more declarative.